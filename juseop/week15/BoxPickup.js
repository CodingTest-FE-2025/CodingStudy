/**
 * 택배 상자 꺼내기
 * 1~n의 번호가 있는 택배 상자가 창고에 있다.
 * 왼쪽에서 오른쪽으로 가면서 1번 상자부터 번호 순대로 한개씩 놓는다.
 * 가로로 택배상자를 W개 놓았다면, 위층에 오른쪽에서 왼쪽으로 가면서 그 위층에 택배상자를 놓는다.
 * 그 층에 상자를 W개 놓아 가장 왼쪽으로 돌아왔다면 그 위층에 또 왼쪽에서 오른쪽으로 놓는다.
 * 이러한 방식으로 n개의 택배 상자를 모두 놓을 때까지 한층에 W개 씩 상자를 쌓는다.
 *
 * 다음날 손님이 자신의 택배를 찾으러 왔는데 택배 번호를 말하면 해당 택배상자를 꺼내 준다.
 * 택배 상자 A를 꺼내려면 먼저 A위에 있는 다른 모든 상자를 꺼내야 A를 꺼낼 수 있다.
 * 즉, A를 꺼내기 위해서는 A보다 바로 위(세로)에 있는 상자들을 모두 꺼내야 한다.
 * 꺼내려는 상자 번호가 주어졌을 때, 꺼내려는 상자를 포함해 총 몇개의 택배상자를 꺼내야 하는지 알고싶다.
 * 창고에 있는 택배 상자의 개수를 나타내는 정수 N과 가로에 놓을 수 있는 상자의 개수를 나타내는 정수 W가 주어질 때,
 * 꺼내려는 택배 상자의 번호를 나타내는 정수 Num이 주어질 때 , 이때 꺼내야하는 상자의 총개 수를 return
 *
 * 제한 사항
 * 2 <= N <= 1000
 * 1 <= W <= 10
 * 1 <= Num <= N
 *
 * 입출력 예
 * n = 22, w = 6, num = 8 result = 8
 * n = 13, w = 3, num = 6 result = 4
 */

//1. 번호를 새긴 상자들을 쌓고 꺼내는 방식으로 구현
//2. 스택 큐를 활용해서 풀면 좋을 것 같다.

function solution(n, w, num) {
  let stack = [];
  let count = 0;

  for (let i = 1; i <= n; i++) {
    stack.push(i); // 상자 넣기
    count++; // 꺼낸 횟수 증가

    if (i === num) break; // 찾는 상자면 종료

    if (stack.length > w) {
      stack.shift(); // 창 크기를 초과하면 맨 앞 상자 제거
    }
  }

  return count;
}
// 해서 풀었는데 실패..지그재그을 구하는 방식을 잘 모르겠음. 너무 쉽게 생각한듯...
// 결국 gpt와 구글링 통해서 찾은 방식
function solution(n, w, num) {
  let result = 0;
  for (; num <= n; result++) {
    const row = Math.ceil(num / w); // 현재 상자가 있는 층
    const rowEnd = row * w; // 그 층의 마지막 번호
    const diff = rowEnd - num; // 오른쪽 끝에서 얼마나 떨어져 있는가
    num += diff * 2 + 1; // 위층 상자로 이동
  }
  return result;
}
