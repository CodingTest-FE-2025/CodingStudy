/**
 * 짝지어 제거하기
 *
 * 알파벳 소문자로 이루어진 문자열을 가지고 시작.
 * 문자열에서 같은 알파벳이 2개 붙어 있는 짝을 찾는다. 그다음, 그 둘을 제거한 뒤, 앞으로 문자열을 이어 붙임.
 * 이런 과정을 반복해서 문자열을 모두 제거한다면 짝지어 제거하기가 종료.
 * 문자열 S가 주어졌을 때, 짝지어 제거하기를 성공적으로 수행할 수 있는지 함수를 완성.
 * 성공적으로 수행할 수 있으면 1을 아니면 0을 return.
 *
 * 문자열 S = "baabaa"일 때, S를 짝지어 제거하면 "b aa baa" -> "bb aa" -> "aa" -> ""로 변환.
 * 최종적으로 빈 문자열이 되므로 1을 return.
 *
 * "cdcd"는 짝지어 제거하기를 수행해도 남는 문자가 없으므로 0을 return.
 */

// 스택을 이용하여 풀면 될거 같은디..우째 풀까나..

function solution(s) {
  let stack = [];
  for (let i = 0; i < s.length; i++) {
    const char = s[i];
    if (stack[stack.length - 1] === char) {
      stack.pop(); // 짝이 맞으면 제거
    } else {
      stack.push(char); // 짝이 안 맞으면 추가
    }
  }
  return stack.length === 0 ? 1 : 0;
}

// 1. 문자열 S를 순회
// 2. 스택의 맨위 요소와 현재 문자가 같아면 짝이 맞으므로 제거(pop)
// 3. 다르면 스택에 추가(push)
// 4. 모든 문자를 순회한 후 스택이 비어있으면 1, 아니면 0을 return
