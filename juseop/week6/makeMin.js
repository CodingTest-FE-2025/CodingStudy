/**
 * 길이가 같은 배열 A,B가 있다. 각 배열은 자연수로 이루어져 있으며,
 * 배열 A,B에서 각각 한개의 숫자를 뽑아 두 수를 곱한다. 이러한 과정을 배열의 길이만큼 반복
 * 두 수를 곱한 값을 누적하여 더한다.
 * 이때 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표이다.
 * 단, 각 배열에서 K번째 숫자를 뽑았다면 다음에 k번째 숫자는 다시 뽑을 수 없다.
 * A=[1,4,2], B=[5,4,4]라면 
 * A에서 첫번째 숫자인 1, B에서 첫번째 숫자인 5를 뽑아 곱하여 더한다. (누적된 값 :0+5(1X5)=5)
 * A에서 두번째 숫자인 4, B에서 세번쨰 숫자인 4를 곱하여 더한다.(누적된 값 :5+16(4X4)=21)
 * A에서 세번째 숫자인 2, B에서 두번째 숫자인 4를 뽑아 곱하여 더한다.(누적된 값 : 21+8(2X4)= 29)
 * 즉 이경우가 최소가 되므로 29를 리턴
 * 배열 A,B가 주어질 때 최종적으로 누적도니 최솟값을 리턴하는 함수를 완성하라. 
 * 
 * 중복으론 불가능.
 */

function solution(A,B){
    let answer=0;
    A.sort((a,b)=>a-b); //A를 오름차순 정렬
    B.sort((a,b)=>b-a); //B를 내림차순 정렬

    for(let i=0; i<A.length; i++){ 
        answer +=A[i]*B[i];
    }//곱셈 후 합산하여 answer 리턴.
    return answer;
}

/**
 * A의 오름차순, B의 내림차순으로 정렬을 하면
 * 서로 작은 값과 큰 값을 곱하는 방식이 되어 전체 합이 최소화가 된다.
 */